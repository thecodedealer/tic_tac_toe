{"version":3,"sources":["store/types.ts","store/selectors.ts","components/Square/Square.tsx","store/actions.ts","components/Button/Button.tsx","components/GameBoard/GameBoard.tsx","hooks/useWinner.ts","components/SelectNamesForm/SelectNames.tsx","App.tsx","reportWebVitals.ts","store/reducer.ts","index.tsx"],"names":["ActionTypes","selectReducer","state","selectBoard","createSelector","test","board","selectTurn","turn","selectPlayers","players","selectCurrentPlayer","selectStep","step","Square","target","action","className","onClick","navigate","payload","type","NAVIGATE","Button","name","props","toUpperCase","GameBoard","dispatch","useDispatch","useSelector","currentPlayer","winner","useMemo","lines","i","length","a","b","c","useWinner","handleMove","useCallback","value","SET_MOVE","SET_TURN","renderBoard","map","column","item","RESET_GAME","SelectNames","handleChange","event","SET_PLAYER_NAME","setPlayerName","currentTarget","htmlFor","id","onChange","e","disabled","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","Array","fill","1","2","rootReducer","produce","draft","TEST","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.17d4a4a4.chunk.js","sourcesContent":["/**\n * STATE INTERFACE\n */\nexport interface IState {\n    step: number\n    test: any\n    board: any[]\n    players: {\n        1: string,\n        2: string\n    }\n    turn: 1 | 2\n\n}\n\n/**\n * ACTION TYPES\n */\nexport enum ActionTypes {\n    NAVIGATE = 'NAVIGATE',\n    TEST = 'TEST',\n    SET_MOVE = 'SET_MOVE',\n    SET_TURN = 'SET_TURN',\n    SET_PLAYER_NAME = 'SET_PLAYER_NAME',\n\n    NET_GAME = 'NET_GAME',\n    RESET_GAME = 'RESET_GAME'\n}\n\n\n/**\n * ACTIONS CREATORS INTERFACES\n */\nexport interface NavigateAction {\n    type: ActionTypes.NAVIGATE,\n    payload: number\n}\n\nexport interface TestAction {\n    type: ActionTypes.TEST,\n    payload: any\n}\n\nexport interface SetMoveAction {\n    type: ActionTypes.SET_MOVE,\n    payload: {\n        value: number,\n        target: 'X' | 'O'\n    }\n}\n\nexport interface SetTurnAction {\n    type: ActionTypes.SET_TURN,\n    payload?: null\n}\n\nexport interface SetPlayerName {\n    type: ActionTypes.SET_PLAYER_NAME,\n    payload: {\n        target: 1 | 2,\n        name: string\n    }\n}\n\nexport interface NewGameAction {\n    type: ActionTypes.NET_GAME,\n    payload: null\n}\n\nexport interface ResetGameAction {\n    type: ActionTypes.RESET_GAME,\n    payload?: null\n}\n\n\nexport type Actions = TestAction\n    | SetMoveAction\n    | SetPlayerName\n    | SetTurnAction\n    | NewGameAction\n    | ResetGameAction\n    | NavigateAction\n","import {IState} from \"./types\";\nimport {createSelector} from 'reselect'\n\n\nconst selectReducer = (state: IState) => state\n\nexport const selectTest = createSelector(selectReducer, state => state.test)\n\nexport const selectBoard = createSelector(selectReducer, state => state.board)\nexport const selectTurn = createSelector(selectReducer, state => state.turn)\nexport const selectPlayers = createSelector(selectReducer, state => state.players)\nexport const selectCurrentPlayer = createSelector(selectReducer, selectTurn, (state, turn) => state.players[turn])\nexport const selectStep = createSelector(selectReducer, state => state.step)\n","import React, {FC} from \"react\";\n\ninterface IProps {\n    target: 'X' | 'O'\n    action?: () => void\n\n    [key: string]: any\n}\n\nconst Square: FC<IProps> = ({target, action}) => {\n    return (\n        <span className=\"square\" onClick={action}>{target}</span>\n    )\n}\n\nexport default Square\n","import {ActionTypes, NavigateAction, ResetGameAction, SetMoveAction, SetPlayerName, SetTurnAction} from \"./types\";\n\nexport const triggerTest = (payload: any) => ({\n    type: ActionTypes.TEST,\n    payload\n})\n\nexport const setMove = (payload: { value: number, target: 'X' | 'O' }): SetMoveAction => ({\n    type: ActionTypes.SET_MOVE,\n    payload\n})\n\nexport const setTurn = (): SetTurnAction => ({\n    type: ActionTypes.SET_TURN,\n    payload: null\n})\n\nexport const setPlayerName = (target: 1 | 2, name: string): SetPlayerName => ({\n    type: ActionTypes.SET_PLAYER_NAME,\n    payload: {target, name}\n})\n\nexport const navigate = (payload: number): NavigateAction => ({\n    type: ActionTypes.NAVIGATE,\n    payload\n})\n\nexport const resetGame = (): ResetGameAction => ({\n    type: ActionTypes.RESET_GAME,\n    payload: null\n})\n","import React, {FC} from \"react\";\n\ninterface IProps {\n    name: string\n\n    [key: string]: any\n}\n\n\nconst Button: FC<IProps> = ({name, ...props}) => {\n    return (\n        <button className=\"custom-btn\" {...props}>{name.toUpperCase()}</button>\n    )\n}\n\nexport default Button\n","import React, {FC, useCallback, useMemo} from 'react';\nimport './GameBoard.scss'\nimport Square from \"../Square/Square\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {selectBoard, selectCurrentPlayer, selectPlayers, selectTurn} from \"../../store/selectors\";\nimport {navigate, resetGame, setMove, setTurn} from \"../../store/actions\";\nimport Button from \"../Button/Button\";\nimport {useWinner} from \"../../hooks/useWinner\";\n\ninterface IProps {\n}\n\nconst GameBoard: FC<IProps> = () => {\n    const dispatch = useDispatch()\n    const board = useSelector(selectBoard)\n    const turn = useSelector(selectTurn)\n    const currentPlayer = useSelector(selectCurrentPlayer)\n    const players = useSelector(selectPlayers)\n    const winner = useWinner(board)\n\n    const handleMove = useCallback((value: number) => {\n\n        if (winner || board[value]) return;\n\n        const target = turn === 1 ? \"X\" : \"O\"\n\n        dispatch(setMove({value, target}))\n        dispatch(setTurn())\n    }, [winner, board, dispatch, turn])\n\n    const renderBoard = useMemo(() => {\n        return [[0, 1, 2], [3, 4, 5], [6, 7, 8]].map((column) => {\n            return (\n                <div className=\"column\" key={column[0]}>\n                    {column.map(item => <Square key={item} target={board[item]} action={() => handleMove(item)}/>)}\n                </div>\n            )\n        })\n    }, [handleMove, board])\n\n    return (\n        <div className='game-container'>\n            {!winner && <p className=\"title\">Current player: {currentPlayer.toUpperCase()}</p>}\n            {winner && <p className=\"won\">!!! {players[winner === 'X' ? 1 : 2].toUpperCase()} WON !!!</p>}\n\n            <div className=\"ticTacToe\">\n                {renderBoard}\n            </div>\n\n            <div className=\"buttons\">\n                <Button name=\"Reset Game\" onClick={() => dispatch(resetGame())}/>\n                <Button name=\"New game\" onClick={() => dispatch(navigate(1))}/>\n            </div>\n        </div>\n\n    )\n}\n\nexport default GameBoard\n","import {useMemo} from \"react\";\n\n\nexport const useWinner = (board: any[]) => {\n    return useMemo(() => {\n        const lines = [\n            [0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8],\n            [0, 3, 6],\n            [1, 4, 7],\n            [2, 5, 8],\n            [0, 4, 8],\n            [2, 4, 6],\n        ];\n        for (let i = 0; i < lines.length; i++) {\n            const [a, b, c] = lines[i];\n            if (board[a] && board[a] === board[b] && board[a] === board[c]) {\n                return board[a];\n            }\n        }\n        return null;\n    }, [board])\n}\n","import React, {FC, SyntheticEvent} from \"react\";\nimport Button from \"../Button/Button\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {selectPlayers} from \"../../store/selectors\";\nimport {navigate, setPlayerName} from \"../../store/actions\";\n\ninterface IProps {\n}\n\n\nconst SelectNames: FC<IProps> = () => {\n    const dispatch = useDispatch()\n    const players = useSelector(selectPlayers)\n\n    const handleChange = (event: SyntheticEvent<HTMLInputElement>, target: 1 | 2) => {\n        dispatch(setPlayerName(target, event.currentTarget.value))\n    }\n\n    return (\n        <div className=\"container flex-column\">\n            <h1 className=\"title\">Start new game</h1>\n\n            <div>\n                <label htmlFor=\"player1\">Chose player 1 name: </label>\n                <input type=\"text\" name=\"player1\" id=\"player1\" value={players[\"1\"]}\n                       onChange={(e) => handleChange(e, 1)}/>\n            </div>\n            <br/>\n            <div>\n                <label htmlFor=\"player2\">Chose player 2 name: </label>\n                <input type=\"text\" name=\"player2\" id=\"player2\" value={players[\"2\"]}\n                       onChange={(e) => handleChange(e, 2)}/>\n            </div>\n            <br/>\n\n            <Button disabled={!(players[\"1\"] && players[\"2\"])} onClick={() => dispatch(navigate(2))}\n                    name=\" START NEW GAME\"/>\n        </div>\n    )\n}\n\nexport default SelectNames\n","import React from 'react';\nimport './App.scss';\nimport {useSelector} from \"react-redux\";\nimport {selectStep} from \"./store/selectors\";\n\nimport GameBoard from \"./components/GameBoard/GameBoard\";\nimport SelectNames from \"./components/SelectNamesForm/SelectNames\";\n\nfunction App() {\n    const step = useSelector(selectStep)\n\n    return (\n        <div className=\"flex-container\">\n            <div className=\"flex-justify\">\n                {step === 1 && <SelectNames/>}\n                {step === 2 && <GameBoard/>}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {produce} from 'immer'\nimport {Actions, ActionTypes, IState} from \"./types\";\n\nconst initialState: IState = {\n    step: 1,\n    test: '123',\n    board: Array(9).fill(null),\n    players: {\n        1: '',\n        2: ''\n    },\n    turn: 1\n}\n\nexport const rootReducer = produce((draft = initialState, action: Actions) => {\n    switch (action.type) {\n        case ActionTypes.TEST: {\n            draft.test = action.payload\n            break;\n        }\n\n        case ActionTypes.SET_MOVE: {\n            const {payload: {value, target}} = action\n            draft.board[value ] = target\n            break;\n        }\n\n        case ActionTypes.SET_TURN: {\n            draft.turn = draft.turn === 1 ? 2 : 1\n            break;\n        }\n\n        case ActionTypes.SET_PLAYER_NAME: {\n            const {payload: {name, target}} = action\n            draft.players[target] = name\n            break\n        }\n\n        case ActionTypes.NAVIGATE: {\n            const {payload} = action\n            if (payload === 1)\n                draft.players = {\n                    1: '',\n                    2: ''\n                }\n            else\n                draft.board = Array(9).fill(null)\n            draft.step = payload\n            break;\n        }\n\n        case ActionTypes.RESET_GAME: {\n            draft.board = Array(9).fill(null)\n            draft.turn = 1\n            break\n        }\n\n        default: {\n            return draft\n        }\n    }\n})\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport {rootReducer} from \"./store/reducer\";\nimport {createStore} from \"redux\";\nimport { Provider } from 'react-redux'\n\nconst store = createStore(rootReducer)\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}